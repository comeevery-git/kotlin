매개체의 데이터를 관리하는 용도로 사용하는 클래스
abstract, open sealed, inner 클래스로 정의할 수 없음
반드시 주 생성자를 가지고 있어야 함

-- 자동으로 구현되는 메소드들 --

    equals: 객체가 가지고 있는 변수를 모두 비교함
    hashCode: 객체를 구분하기 위한 고유한 정수값
    toString: 객체명 + 주생성자값을 스트링으로 변환하여 리턴

-- Generic --
    클래스를 작성할 때 변수의 type을 유동적으로 지정하고자 할 떄 사용
    클래스를 작성할 때가 아닌 클래스의 객체를 생성할 때 변수의 type을 정할 수 있음

    -- 가변성 --

    불변성
        Generic이 설정된 객체의 주소값을
        같은 type의 Genericc이 설정된 변수에만 할당할 수 있음
    공변성
        Generic이 설정된 객체의 주소값을
        부모 type의 Generic이 설정된
        변수에도 할당할 수 있음
    반 공변성
        Generic이 설정된 객체의 주소값을
        자식 type의 Generic이 설정된
        변수에도 할당할 수 있음
-- 중첩 클래스 --
    내부 클래스는 외부 클래스의 객체를 통해서만 객체를 생성할 수 있음
    내부 클래스는 외부 클래스의 멤버를 자유롭게(제한없이) 사용할 수 있음

-- 익명 클래스 --
    클래스 안에서 정의하는 이름이 없는 클래스

    interface나 absctracct class를 사용할 때 추로 사용함

    interface나 absctracct class를 상속하는 클래스를 작성함과
    동시에 해당 클래스의 객체를 생성함
-- NullHandling --
    NullPointException: 객체의 주솟값을 할당받지 않은
        참조변수를 통해서 해당 객체에 접근할 때 발생하는 예외

    null safe: 주솟값을 할당받지 않은 참조변수를 통해 접근 시,
        객체에 접근할때 발생하는 예외를 방지하는 여러가지 방법들이 있음
        이 방법들을 사용해서 null값에 대한 안정성을 확보하는 것
    -- !!연산자 --
        null값을 허용하는 변수에 담긴 객체의
        주솟값을 null값을 허용하지 않는 형태의 값으로 바꿈
        ㄴ 변환 후 null값이 들어올 시 NullPointException발생(사용권장x)
    -- ?: 연산자 --
        참조변수에 null이 들어있으면 지정된 기본값을 반환함
    -- ?. 연산자 --
        참조변수에 null이 들어있으면 null 리턴

-- 형변환 Casting --
    변수에 담긴 값이나 객체를 다른 형태(type)으로 변환하는 것
    kotlin 모든 값을 객체로 관리함
    kotlin 에서의 형변환은 다른 클래스 타입의 객체로 변환하는것을 의미

    자식 클래스 타입으로 변환하기
    부모 클래스 타입으로 변환하기
    다른 클래스 타입으로 변환하기

    null 허용과 불허용간의 변환
    -- Smart Casting --
        특정 조건을 만족하는 경우
        자동으로 형변환이 일어남

    -- 객체 type의 형변환 --
        상속 관계에서만 일어남
    -- as 연산자 --
        객체를 지정한 클래스의 타입으로 형변환

    -- is 연상자 --
        형변환이 가능하면 트루를 보냄
    -- Any type --
        Any 클래스는 모든 클래스의 조상 클래스이므로
        Any tpye의 변수는 모든 클래스의 객체의 주소를 할당받을 수 있다

    -- 기본타입의 형변환 --
        toByte(),
        toShort(),
        toInt(),
        toLong(),
        toFloat(),
        toDouble(),
        toChar()

    -- null type의 형변환 --
        null을 허용하는 변수에
        null값이 들어있지 않다면
        null을 허용하지 않는 타입으로
        smart casting이 발생항

        -- if문 사용하기 --
            null을 허용하는 변수에
            null값이 들어있지 않다고
            if 문으로 확인해 주면
            null을 허용하지 않는 타입으로
            smart casting이 발생하여 사용할 수 있음

            비교연산자로 검사하는 경우,
            Any Type인 경우 오류가 발생할 수 있으므로
            비교연산자보다는 is 연산자 사용을권장함
-- 열거형 --
    특정 그룹 안의 구성 요소를 정의하는 값이 필요한 경우 사용함
    정의한 단어 자체가 사용하는 값이 됨